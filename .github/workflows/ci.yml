name: CI
permissions:
  contents: write

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

jobs:
  version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check version bump
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin main
          MAIN=$(jq -r .version <(git show origin/main:package.json))
          PR=$(jq -r .version package.json)
          if [ "$(printf '%s\n%s\n' "$MAIN" "$PR" | sort -V | head -n1)" = "$PR" ]; then
            echo "::error file=package.json::Version must be bumped: PR ($PR) ≤ main ($MAIN)"
            exit 1
          fi          

  build:
    needs: version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.package.outputs.version }}
      vsix-path: ${{ steps.package.outputs.vsix }}
      vsix-name: ${{ steps.package.outputs.name }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install 2>ci.err || true
          if [ -s ci.err ]; then
            while read -r line; do
              echo "::error file=package.json::$line"
            done < ci.err
            exit 1
          fi

      - name: Compile TypeScript
        run: |
          npx tsc -p ./ 2>tsc.err || true
          if [ -s tsc.err ]; then
            sed -E 's~([^ ]+\.ts)\(([0-9]+),([0-9]+)\): error ([A-Z0-9]+): (.*)~::error file=\1,line=\2,col=\3::[\4] \5~' tsc.err \
              | while read -r e; do echo "$e"; done
            exit 1
          fi

      - name: Bundle with esbuild
        shell: bash
        id: bundle
        run: |
          set +e

          # 1) Собираем бандл, stderr → esbuild.err
          npx esbuild out/extension.js \
            --bundle \
            --platform=node \
            --external:vscode \
            --outfile=out/extension.bundle.js 2>esbuild.err
          ESB_STATUS=$?

          if [ -s esbuild.err ]; then
            sed -E 's~([^:]+):([0-9]+):([0-9]+): error: (.*)~::error file=\1,line=\2,col=\3:: \4~' esbuild.err \
              | while read -r e; do echo "$e"; done
            exit 1
          fi

          if [ $ESB_STATUS -ne 0 ]; then
            exit $ESB_STATUS
          fi

          SIZE_BYTES=$(stat -c%s out/extension.bundle.js)
          SIZE_HUMAN=$(du -h out/extension.bundle.js | cut -f1)
          echo "bundle_path=out/extension.bundle.js" >> $GITHUB_OUTPUT
          echo "bundle_size_bytes=${SIZE_BYTES}" >> $GITHUB_OUTPUT
          echo "bundle_size_human=${SIZE_HUMAN}" >> $GITHUB_OUTPUT

          echo "Bundle created: out/extension.bundle.js (${SIZE_HUMAN})"

     

      - name: Install VSCE CLI
        run: npm install --global vsce

      - name: Package VSIX
        id: package
        run: |
          mkdir -p dist
          npx vsce package -o dist/temp.vsix 2>pkg.err || true
          if [ -s pkg.err ]; then
            while read -r line; do
              echo "::error file=dist::$line"
            done < pkg.err
            exit 1
          fi
          NAME=$(jq -r .name package.json)
          VERSION=$(jq -r .version package.json)
          FINAL="dist/${NAME}-${VERSION}.vsix"
          mv dist/temp.vsix "$FINAL"
          echo "version=${VERSION}"       >> $GITHUB_OUTPUT
          echo "vsix=${FINAL}"            >> $GITHUB_OUTPUT
          echo "name=${NAME}-${VERSION}.vsix" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: vsix
          path: ${{ steps.package.outputs.vsix }}

  release:
    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: vsix
          path: dist/

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ needs.build.outputs.version }}
          release_name: v${{ needs.build.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload VSIX to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ needs.build.outputs.vsix-path }}
          asset_name: ${{ needs.build.outputs.vsix-name }}
          asset_content_type: application/octet-stream
