name: CI
permissions:
  contents: write

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [ main ]

jobs:
  version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check version bump
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin main
          MAIN=$(jq -r .version <(git show origin/main:package.json))
          PR=$(jq -r .version package.json)
          if [ "$(printf '%s\n%s\n' "$MAIN" "$PR" | sort -V | head -n1)" = "$PR" ]; then
            echo "Version must be bumped: PR ($PR) â‰¤ main ($MAIN)"
            exit 1
          fi

  build:
    needs: version
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci
        working-directory: vscode-mdx-preview-wb-style

      - name: Compile TypeScript
        run: npm run compile
        working-directory: vscode-mdx-preview-wb-style

      - name: Bundle with esbuild
        run: npm run bundle
        working-directory: vscode-mdx-preview-wb-style

      - name: Install VSCE CLI
        run: npm install --global vsce
        working-directory: vscode-mdx-preview-wb-style

      - name: Package VSIX
        run: npm run package
        working-directory: vscode-mdx-preview-wb-style

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        working-directory: vscode-mdx-preview-wb-style
        with:
          name: vsix
          path: dist/*.vsix

  release:
    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: vsix
          path: dist/

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.package.outputs.version }}
          release_name: v${{ steps.package.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload VSIX to Release
        uses: actions/upload-release-asset@v1
        working-directory: vscode-mdx-preview-wb-style
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/*.vsix
          asset_name: $(basename dist/*.vsix)
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
